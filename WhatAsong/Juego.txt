
//WORKFLOW:

/*
 * Administrador programa n juegos a un paciente X dia, cada juego que asigne a un alumno
 * ara un INSERT en la tabla Partida en el que se le asignara una ID,el id del usuario,ID juego,
 * Tematica,Nivel(Los niveles seran programables por el administrador en otra tabla, no nos preocupa),
 * y el Timestamp de la programacion, todos los demas campos estaran a NULL.
 *
 * Tutor tiene asignados n alumnos e inicia sesion en la webapp, elije un alumno y ve los juegos que tiene programados para ese dia
 * (Lo que en realidad ve son las partidas disponibles de la tabla Partidas).
 *
 *
 * Elije un juego
 * (En este momento haremos una peticion al objeto partida que hemos selecionado y deberemos guardarlo en un objeto de  nuestra clase Partida()).
 *
 * Aparece pantalla de configuracionen en ella podra selecionar la tematica y el nivel en el caso que sea posible.
 * (Por defecto ya vendran selecionadas con las opciones de la partida programada, como por defecto).
 * Se debera poder elegir otras tematicas y niveles compatibles (para ello una petici√≥n ajax a la base de datos nos dara todos los nombre
 * de tematica disponibles i todos los niveles para este juego)
 * Si esto ocurre deberemos actualizar nuestro objeto partida con la nueva tematica y el nivel
 *
 * Una vez configurado el juego le daremos a jugar, en ese momento se cargaran desde el servidor los recursos multimedia deseados (Tematica y nivel).
 * Para ello se enviara una peticion al backend enviado la tematica y el nivel y este nos contestara con un array de objetos Media
 * que guardaremos con nuestra clase Media()
 *
 * Al acabar la partida, se enviara nuestro objeto Partida y hara el update con el registro original de la tabla Partida
 * Tanto la recepcion como el envio de datos se hara por Ajax hacia el backend en formato JSON
 *
 * Para poder gestionar las respuesta del servidor tenemos estas dos clases:
 * */

//Constructores de los objetos que usuaremos en el juego

//Clase que permite Instanciar un Modelo que puede recojer los datos de una partida recibida por el servidor
//function Partida(idPartida,tiempoJugada,tiempoReaccion,tiempoTotal,cliks,fallos,aciertos,tematica,nivel,velocidad,comentario,numImgTotal,parejasValidas,imagenesDiferentes,repeticionesSonido,numeroSonidos,imagenesIniciales,imagenesFinales) {
function Partida(ObjPartida) {

    this.id_partida=ObjPartida.id_partida;
    this.tiempoReaccion = ObjPartida.tiempoReaccion;
    this.tiempoTotal = ObjPartida.tiempoTotal;
    this.cliks = ObjPartida.cliks;
    this.fallos = ObjPartida.fallos;
    this.aciertos=ObjPartida.aciertos;
    this.tematica=ObjPartida.tematica;
    this.nivel=ObjPartida.nivel;
    this.velocidad=ObjPartida.velocidad;
    this.comentario=ObjPartida.comentario;
    this.numImgTotal=ObjPartida.numImgTotal;
    this.velocidad=ObjPartida.velocidad;
    this.parejasValidas=ObjPartida.parejasValidas;
    this.imagenesDiferentes=ObjPartida.imagenesDiferentes;
    this.repeticionesSonido=ObjPartida.repeticionesSonido;
    this.numeroSonidos=ObjPartida.numeroSonidos;
    this.imagenesIniciales=ObjPartida.imagenesIniciales;
    this.imagenesFinales=ObjPartida.imagenesFinales;



}

//Funcion que nos retornara nuestro objeto partida, recibe como parametro la url/{id]de la partida a obtener (esta url estara en un input hidden en el DOM de la vista)
//(Pensar que al final los juegos seran entregados a traves de symfony via Twig)
function getPartida(url) {

    $.ajax({
        type: "GET",
        url: url,
        success: function(partida) {
            partida = new Partida(JSON.parse(Objpartida));
            return partida;

        }
    });

}

//Funcion que enviara nuestro objeto partida, y sobreescribira el que esta en la tabla partida, 
//recibe como parametro url/(PeticionHTTP){id} y el objeto partida
function sendPartida(url,partida) {

    $.ajax({
        type: "PUT",
        url: url+partida.id,
        data:JSON.stringify(partida),
        success: function(msg) {
            console.log(msg);

        }
    });

}

//Clase que permite instanciar un Modelo que puede recojer los datos de un objeto Media enviado por el servidor
// (Lo suyo sera hacer un array de objetos Media para poder recorrerla, tal como nos vendra en el servidor) (Metodo getLibrayMEdia)



function Media(ObjMedia){

    this.id=ObjMedia.id;
    this.url_img=ObjMedia.url_img;
    this.url_sonido_hablado=ObjMedia.url_sonido_hablado;
    this.url_sonido_escuchado=ObjMedia.url_sonido_escuchado;

}


function getLibraryMedia(url,tematica,nivel) {

    var data=[];
    $.ajax({
        type: "GET",
        url: url/tematica/nivel,
        success: function(LibraryMedia) {
            LibraryMedia=JSON.parse(LibraryMedia);
            for(i=0;LibraryMedia.length;i++){
                media=new Media(LibraryMedia[i]);
                data.push(media);


            }
            return data;

        }
    });

}




